/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$functions extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RDB$FUNCTIONS</code>
     */
    public static final Rdb$functions RDB$FUNCTIONS = new Rdb$functions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_NAME</code>.
     */
    public final TableField<Record, String> RDB$FUNCTION_NAME = createField(DSL.name("RDB$FUNCTION_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$FUNCTION_TYPE = createField(DSL.name("RDB$FUNCTION_TYPE"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$QUERY_NAME</code>.
     */
    public final TableField<Record, String> RDB$QUERY_NAME = createField(DSL.name("RDB$QUERY_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField(DSL.name("RDB$DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$MODULE_NAME</code>.
     */
    public final TableField<Record, String> RDB$MODULE_NAME = createField(DSL.name("RDB$MODULE_NAME"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$ENTRYPOINT</code>.
     */
    public final TableField<Record, String> RDB$ENTRYPOINT = createField(DSL.name("RDB$ENTRYPOINT"), SQLDataType.CHAR, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$RETURN_ARGUMENT</code>.
     */
    public final TableField<Record, Short> RDB$RETURN_ARGUMENT = createField(DSL.name("RDB$RETURN_ARGUMENT"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField(DSL.name("RDB$SYSTEM_FLAG"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$ENGINE_NAME</code>.
     */
    public final TableField<Record, String> RDB$ENGINE_NAME = createField(DSL.name("RDB$ENGINE_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$PACKAGE_NAME</code>.
     */
    public final TableField<Record, String> RDB$PACKAGE_NAME = createField(DSL.name("RDB$PACKAGE_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$PRIVATE_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$PRIVATE_FLAG = createField(DSL.name("RDB$PRIVATE_FLAG"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$FUNCTION_SOURCE = createField(DSL.name("RDB$FUNCTION_SOURCE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_ID</code>.
     */
    public final TableField<Record, Short> RDB$FUNCTION_ID = createField(DSL.name("RDB$FUNCTION_ID"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$FUNCTION_BLR</code>.
     */
    public final TableField<Record, byte[]> RDB$FUNCTION_BLR = createField(DSL.name("RDB$FUNCTION_BLR"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$VALID_BLR</code>.
     */
    public final TableField<Record, Short> RDB$VALID_BLR = createField(DSL.name("RDB$VALID_BLR"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$DEBUG_INFO</code>.
     */
    public final TableField<Record, byte[]> RDB$DEBUG_INFO = createField(DSL.name("RDB$DEBUG_INFO"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$SECURITY_CLASS</code>.
     */
    public final TableField<Record, String> RDB$SECURITY_CLASS = createField(DSL.name("RDB$SECURITY_CLASS"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$OWNER_NAME</code>.
     */
    public final TableField<Record, String> RDB$OWNER_NAME = createField(DSL.name("RDB$OWNER_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$LEGACY_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$LEGACY_FLAG = createField(DSL.name("RDB$LEGACY_FLAG"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$FUNCTIONS.RDB$DETERMINISTIC_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$DETERMINISTIC_FLAG = createField(DSL.name("RDB$DETERMINISTIC_FLAG"), SQLDataType.SMALLINT, this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<Record, Object> RDB$SQL_SECURITY = createField(DSL.name("RDB$SQL_SECURITY"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"RDB$SQL_SECURITY\""), this, "");

    private Rdb$functions(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rdb$functions(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions(String alias) {
        this(DSL.name(alias), RDB$FUNCTIONS);
    }

    /**
     * Create an aliased <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions(Name alias) {
        this(alias, RDB$FUNCTIONS);
    }

    /**
     * Create a <code>RDB$FUNCTIONS</code> table reference
     */
    public Rdb$functions() {
        this(DSL.name("RDB$FUNCTIONS"), null);
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.RDB$INDEX_9, Keys.RDB$INDEX_53);
    }

    @Override
    public Rdb$functions as(String alias) {
        return new Rdb$functions(DSL.name(alias), this);
    }

    @Override
    public Rdb$functions as(Name alias) {
        return new Rdb$functions(alias, this);
    }

    @Override
    public Rdb$functions as(Table<?> alias) {
        return new Rdb$functions(alias.getQualifiedName(), this);
    }
}
