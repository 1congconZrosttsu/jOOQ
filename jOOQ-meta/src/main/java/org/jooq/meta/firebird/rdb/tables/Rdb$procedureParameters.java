/*
 * This file is generated by jOOQ.
 */
package org.jooq.meta.firebird.rdb.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.meta.firebird.rdb.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rdb$procedureParameters extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>RDB$PROCEDURE_PARAMETERS</code>
     */
    public static final Rdb$procedureParameters RDB$PROCEDURE_PARAMETERS = new Rdb$procedureParameters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_NAME</code>.
     */
    public final TableField<Record, String> RDB$PARAMETER_NAME = createField(DSL.name("RDB$PARAMETER_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PROCEDURE_NAME</code>.
     */
    public final TableField<Record, String> RDB$PROCEDURE_NAME = createField(DSL.name("RDB$PROCEDURE_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_NUMBER</code>.
     */
    public final TableField<Record, Short> RDB$PARAMETER_NUMBER = createField(DSL.name("RDB$PARAMETER_NUMBER"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_TYPE</code>.
     */
    public final TableField<Record, Short> RDB$PARAMETER_TYPE = createField(DSL.name("RDB$PARAMETER_TYPE"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$FIELD_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$FIELD_SOURCE = createField(DSL.name("RDB$FIELD_SOURCE"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DESCRIPTION</code>.
     */
    public final TableField<Record, String> RDB$DESCRIPTION = createField(DSL.name("RDB$DESCRIPTION"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$SYSTEM_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$SYSTEM_FLAG = createField(DSL.name("RDB$SYSTEM_FLAG"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DEFAULT_VALUE</code>.
     */
    public final TableField<Record, byte[]> RDB$DEFAULT_VALUE = createField(DSL.name("RDB$DEFAULT_VALUE"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$DEFAULT_SOURCE</code>.
     */
    public final TableField<Record, String> RDB$DEFAULT_SOURCE = createField(DSL.name("RDB$DEFAULT_SOURCE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$COLLATION_ID</code>.
     */
    public final TableField<Record, Short> RDB$COLLATION_ID = createField(DSL.name("RDB$COLLATION_ID"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$NULL_FLAG</code>.
     */
    public final TableField<Record, Short> RDB$NULL_FLAG = createField(DSL.name("RDB$NULL_FLAG"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PARAMETER_MECHANISM</code>.
     */
    public final TableField<Record, Short> RDB$PARAMETER_MECHANISM = createField(DSL.name("RDB$PARAMETER_MECHANISM"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$FIELD_NAME</code>.
     */
    public final TableField<Record, String> RDB$FIELD_NAME = createField(DSL.name("RDB$FIELD_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$RELATION_NAME</code>.
     */
    public final TableField<Record, String> RDB$RELATION_NAME = createField(DSL.name("RDB$RELATION_NAME"), SQLDataType.CHAR(63), this, "");

    /**
     * The column <code>RDB$PROCEDURE_PARAMETERS.RDB$PACKAGE_NAME</code>.
     */
    public final TableField<Record, String> RDB$PACKAGE_NAME = createField(DSL.name("RDB$PACKAGE_NAME"), SQLDataType.CHAR(63), this, "");

    private Rdb$procedureParameters(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Rdb$procedureParameters(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters(String alias) {
        this(DSL.name(alias), RDB$PROCEDURE_PARAMETERS);
    }

    /**
     * Create an aliased <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters(Name alias) {
        this(alias, RDB$PROCEDURE_PARAMETERS);
    }

    /**
     * Create a <code>RDB$PROCEDURE_PARAMETERS</code> table reference
     */
    public Rdb$procedureParameters() {
        this(DSL.name("RDB$PROCEDURE_PARAMETERS"), null);
    }

    @Override
    public List<UniqueKey<Record>> getUniqueKeys() {
        return Arrays.asList(Keys.RDB$INDEX_18);
    }

    @Override
    public Rdb$procedureParameters as(String alias) {
        return new Rdb$procedureParameters(DSL.name(alias), this);
    }

    @Override
    public Rdb$procedureParameters as(Name alias) {
        return new Rdb$procedureParameters(alias, this);
    }

    @Override
    public Rdb$procedureParameters as(Table<?> alias) {
        return new Rdb$procedureParameters(alias.getQualifiedName(), this);
    }
}
