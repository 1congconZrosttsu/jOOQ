/*
 * This file is generated by jOOQ.
 */
package org.jooq.impl;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.MigrationImpl.Status;


/**
 * The migration log of jOOQ Migrations.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
class Changelog extends TableImpl<ChangelogRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>JOOQ_MIGRATIONS_CHANGELOG</code>
     */
    static final Changelog CHANGELOG = new Changelog();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChangelogRecord> getRecordType() {
        return ChangelogRecord.class;
    }

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.ID</code>. The database
     * version ID.
     */
    final TableField<ChangelogRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "The database version ID.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.MIGRATED_FROM</code>. The
     * previous database version ID.
     */
    final TableField<ChangelogRecord, String> MIGRATED_FROM = createField(DSL.name("MIGRATED_FROM"), SQLDataType.VARCHAR(255).nullable(false), this, "The previous database version ID.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.MIGRATED_TO</code>.
     */
    final TableField<ChangelogRecord, String> MIGRATED_TO = createField(DSL.name("MIGRATED_TO"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.MIGRATED_AT</code>. The
     * date/time when the database version was migrated to.
     */
    final TableField<ChangelogRecord, Timestamp> MIGRATED_AT = createField(DSL.name("MIGRATED_AT"), SQLDataType.TIMESTAMP(6).nullable(false), this, "The date/time when the database version was migrated to.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.MIGRATION_TIME</code>. The
     * time in milliseconds it took to migrate to this database version.
     */
    final TableField<ChangelogRecord, Long> MIGRATION_TIME = createField(DSL.name("MIGRATION_TIME"), SQLDataType.BIGINT, this, "The time in milliseconds it took to migrate to this database version.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.JOOQ_VERSION</code>. The jOOQ
     * version used to migrate to this database version.
     */
    final TableField<ChangelogRecord, String> JOOQ_VERSION = createField(DSL.name("JOOQ_VERSION"), SQLDataType.VARCHAR(50).nullable(false), this, "The jOOQ version used to migrate to this database version.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.SQL</code>. The SQL statements
     * that were run to install this database version.
     */
    final TableField<ChangelogRecord, String> SQL = createField(DSL.name("SQL"), SQLDataType.CLOB, this, "The SQL statements that were run to install this database version.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.SQL_COUNT</code>. The number
     * of SQL statements that were run to install this database version.
     */
    final TableField<ChangelogRecord, Integer> SQL_COUNT = createField(DSL.name("SQL_COUNT"), SQLDataType.INTEGER.nullable(false), this, "The number of SQL statements that were run to install this database version.");

    /**
     * The column <code>JOOQ_MIGRATIONS_CHANGELOG.STATUS</code>. The database
     * version installation status.
     */
    final TableField<ChangelogRecord, Status> STATUS = createField(DSL.name("STATUS"), SQLDataType.VARCHAR(10).nullable(false), this, "The database version installation status.", new EnumConverter<String, Status>(String.class, Status.class));

    private Changelog(Name alias, Table<ChangelogRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Changelog(Name alias, Table<ChangelogRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("The migration log of jOOQ Migrations."), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>JOOQ_MIGRATIONS_CHANGELOG</code> table reference
     */
    Changelog(String alias) {
        this(DSL.name(alias), CHANGELOG);
    }

    /**
     * Create an aliased <code>JOOQ_MIGRATIONS_CHANGELOG</code> table reference
     */
    Changelog(Name alias) {
        this(alias, CHANGELOG);
    }

    /**
     * Create a <code>JOOQ_MIGRATIONS_CHANGELOG</code> table reference
     */
    Changelog() {
        this(DSL.name("JOOQ_MIGRATIONS_CHANGELOG"), null);
    }

    @Override
    public Identity<ChangelogRecord, Integer> getIdentity() {
        return (Identity<ChangelogRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ChangelogRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Changelog.CHANGELOG, DSL.name("JOOQ_MIGR_PK"), new TableField[] { Changelog.CHANGELOG.ID }, true);
    }

    @Override
    public List<Check<ChangelogRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("JOOQ_MIGR_CHK1"), "\"STATUS\" IN('RUNNING', 'SUCCESS', 'FAILED')", true)
        );
    }

    @Override
    public Changelog as(String alias) {
        return new Changelog(DSL.name(alias), this);
    }

    @Override
    public Changelog as(Name alias) {
        return new Changelog(alias, this);
    }

    @Override
    public Changelog as(Table<?> alias) {
        return new Changelog(alias.getQualifiedName(), this);
    }
}
